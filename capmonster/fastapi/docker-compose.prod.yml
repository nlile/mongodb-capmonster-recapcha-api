version: "3.8"
services:
  fastapi-capmonster:
    container_name: ${DOCKER_IMAGE_NAME?Variable not set}
    image: '${DOCKER_IMAGE_NAME?Variable not set}:${TAG-latest}'
    env_file:
      - .env
    build:
      context: ./
      dockerfile: Dockerfile.prod
    volumes:
        - .:/app
    restart: unless-stopped
    labels:
      # Enable Traefik for this service, to make it available in the public network
      - traefik.enable=true
      # Use the traefik-public network (declared below)
      - traefik.docker.network=traefik-public
      # traefik-http set up only to use the middleware to redirect to https
      - traefik.http.middlewares.${TRAEFIK_CONTAINER?Variable not set}-https-redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.${TRAEFIK_CONTAINER?Variable not set}-https-redirect.redirectscheme.permanent=true

      # Handle host with and without "www" to redirect to only one of them
      # Uses environment variable DOMAIN
      # To disable www redirection remove the Host() you want to discard, here and
      # below for HTTPS
      - traefik.http.routers.${TRAEFIK_CONTAINER?Variable not set}-proxy-http.rule=Host(`${DOMAIN?Variable not set}`)
      - traefik.http.routers.${TRAEFIK_CONTAINER?Variable not set}-proxy-http.entrypoints=http
      # traefik-https the actual router using HTTPS
      - traefik.http.routers.${TRAEFIK_CONTAINER?Variable not set}-proxy-https.rule=Host(`${DOMAIN?Variable not set}`)
      - traefik.http.routers.${TRAEFIK_CONTAINER?Variable not set}-proxy-https.entrypoints=https
      - traefik.http.routers.${TRAEFIK_CONTAINER?Variable not set}-proxy-https.tls=true
      # Use the "le" (Let's Encrypt) resolver created below
      - traefik.http.routers.${TRAEFIK_CONTAINER?Variable not set}-proxy-https.tls.certresolver=le
      # Define the port inside of the Docker service to use
      - traefik.http.services.${TRAEFIK_CONTAINER?Variable not set}-proxy.loadbalancer.server.port=80

      ##########
      # Lines below handle cases where non-www should redirect to www and vice versa
      # IF using a single subdomain, such as api.example.com, do not uncomment anything else
      # IF redirecting subdomains such as non-www to www, uncomment the relevant lines
      ##########
      # To disable www redirection, leave the next line commented
      # - traefik.http.middlewares.${TRAEFIK_CONTAINER?Variable not set}-www-redirect.redirectregex.regex=^https?://(www.)?(${DOMAIN?Variable not set})/(.*)
      # Redirect a domain with www to non-www
      # To enable, uncomment the next line
      # - traefik.http.middlewares.${TRAEFIK_CONTAINER?Variable not set}-www-redirect.redirectregex.replacement=https://${DOMAIN?Variable not set}/$${3}
      # Redirect a domain without www to www
      # To enable it leave the previous line commented and uncomment the next
      # - traefik.http.middlewares.${TRAEFIK_CONTAINER?Variable not set}-www-redirect.redirectregex.replacement=https://www.${DOMAIN}/$${3}
      # Make Redirect Permanent
      # - traefik.http.middlewares.${TRAEFIK_CONTAINER?Variable not set}-www-redirect.redirectregex.permanent=true
      # The Middleware for redirection, to enable it uncomment the next line
      # - traefik.http.routers.${TRAEFIK_CONTAINER?Variable not set}-proxy-https.middlewares=${TRAEFIK_CONTAINER?Variable not set}-www-redirect
      # Middleware to redirect www, and redirect HTTP to HTTPS
      # to enable non/www subdomain redirection, append this section to the next line: ,${TRAEFIK_CONTAINER?Variable not set}-www-redirect
      - traefik.http.routers.${TRAEFIK_CONTAINER?Variable not set}-proxy-http.middlewares=${TRAEFIK_CONTAINER?Variable not set}-https-redirect

    networks:
      - traefik-public

networks:
  traefik-public:
    external: true
